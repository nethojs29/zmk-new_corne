#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        ctab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        cmin {
            bindings = <&kp MINUS>;
            key-positions = <15 14>;
        };

        cbtick {
            bindings = <&kp GRAVE>;
            key-positions = <29 30>;
        };

        csq {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 3>;
        };

        cparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
        };

        csqparen {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <30 31>;
        };

        curly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <4 3>;
        };

        paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <17 16>;
        };

        brack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
        };

        slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <10 11>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <25 26>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <39 40>;
        };

        bloq {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&none  &kp Q    &kp W       &kp E         &kp R       &kp T                                                   &mmv MOVE_UP                     &kp Y      &kp U      &kp I         &kp O       &kp P     &none
&none  &lt 1 A  &hm LGUI S  &hm LSHIFT D  &hm LALT F  &hm LA(LC(LG(LSHIFT))) G                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H      &lt 5 J    &hm LSHIFT K  &hm LGUI L  &kp SEMI  &none
&none  &kp Z    &kp X       &kp C         &kp V       &kp B                     &kp K_MUTE                    &mmv MOVE_DOWN                   &kp N      &kp M      &kp COMMA     &kp DOT     &kp FSLH  &none
                            &kp LCTRL     &kp BSPC    &lt 4 ESC                                                                                &kp ENTER  &kp SPACE  &tog 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans              &trans         &kp LC(UP_ARROW)                       &trans          &trans          &trans        &trans      &trans         &trans  &trans
&trans  &trans  &trans  &trans              &trans         &kp LC(DOWN)                   &trans  &trans  &trans  &kp LEFT        &kp DOWN      &kp UP      &kp RIGHT      &trans  &trans
&trans  &trans  &trans  &trans              &trans         &trans            &kp LG(W)            &trans          &kp LG(LEFT)    &kp LG(DOWN)  &kp LG(UP)  &kp LG(RIGHT)  &trans  &trans
                        &kp LC(LEFT_ARROW)  &kp LC(RIGHT)  &trans                                                 &kp C_PREVIOUS  &kp C_STOP    &kp C_NEXT
            >;

            label = "NAV";
            sensor-bindings = <&inc_dec_kp LG(TAB) LS(LG(TAB))>;
        };

        dvorak {
            bindings = <
&trans  &kp APOS  &kp COMMA  &kp DOT  &kp P   &kp Y                     &trans          &kp F   &kp G   &kp C   &kp R  &kp L  &kp FSLH
&trans  &kp A     &kp O      &kp E    &kp U   &kp I             &trans  &trans  &trans  &kp D   &kp H   &kp T   &kp N  &kp S  &kp MINUS
&trans  &kp SEMI  &kp Q      &kp J    &kp K   &kp X   &trans            &trans          &kp B   &kp M   &kp W   &kp V  &kp Z  &trans
                             &trans   &trans  &trans                                    &trans  &trans  &trans
            >;

            label = "DVORAK";
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOLUME_UP>;
        };

        config {
            display-name = "CONFIG";
            bindings = <
&trans  &kp N1           &kp N2          &kp N3        &kp N4         &kp LC(UP)                                     &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
&trans  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans         &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                         &kp LC(LEFT)  &kp LC(RIGHT)  &trans                                                                          &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numbers {
            bindings = <
&trans  &kp N1        &kp N2      &kp N3         &kp N4        &kp N5                           &trans          &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &trans
&trans  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)            &trans  &trans  &trans  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &trans
&none   &kp F2        &kp F3      &kp F4         &kp F5        &kp F6         &trans            &trans          &kp F7         &kp F8        &kp F9        &kp F10       &kp F11       &none
                                  &trans         &trans        &trans                                           &trans         &trans        &trans
            >;

            label = "NUMBERS";
        };

        symbols {
            bindings = <
&trans  &trans  &kp LS(LBRC)  &kp LS(RBRC)  &trans  &trans                    &trans          &trans  &trans  &trans         &trans  &trans  &trans
&trans  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &kp LS(COLON)  &trans  &trans  &trans
&trans  &trans  &kp LBKT      &kp RBKT      &trans  &trans  &trans            &trans          &trans  &trans  &trans         &trans  &trans  &trans
                              &trans        &trans  &trans                                    &trans  &trans  &trans
            >;

            label = "SYMBOLS";
        };
    };
};
